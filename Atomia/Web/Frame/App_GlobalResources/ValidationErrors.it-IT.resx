<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DomainExists" xml:space="preserve">
    <value>Nome di dominio già esistente nel sistema</value>
  </data>
  <data name="ErrorEmptyField" xml:space="preserve">
    <value>Questo campo non può essere vuoto</value>
  </data>
  <data name="ErrorInvalidChars" xml:space="preserve">
    <value>Caratteri non validi</value>
  </data>
  <data name="ErrorInvalidDomain" xml:space="preserve">
    <value>Nome di dominio non valido</value>
  </data>
  <data name="ErrorInvalidDomains" xml:space="preserve">
    <value>Uno o più nomi di dominio non sono validi</value>
  </data>
  <data name="ErrorInvalidEmail" xml:space="preserve">
    <value>Indirizzo e-mail non valido</value>
  </data>
  <data name="ErrorInvalidFormat" xml:space="preserve">
    <value>Formato non valido</value>
  </data>
  <data name="ErrorInvalidOrgNumber" xml:space="preserve">
    <value>Formato non valido, 10 cifre previste</value>
  </data>
  <data name="ErrorInvalidPostNumber" xml:space="preserve">
    <value>Numero civico non valido</value>
  </data>
  <data name="ErrorInvalidSubdomain" xml:space="preserve">
    <value>Nome sottodominio non valido.</value>
  </data>
  <data name="ErrorInvalidVATNumber" xml:space="preserve">
    <value>Numero Partita IVA europea non valido</value>
  </data>
  <data name="ErrorMultiLevelSubdomain" xml:space="preserve">
    <value>Solo sottodomini di livello singolo consentiti.</value>
  </data>
  <data name="ErrorNoDomain" xml:space="preserve">
    <value>Selezionare un nome di dominio</value>
  </data>
  <data name="ErrorNumDomains" xml:space="preserve">
    <value>È stato superato il numero massimo di nomi di dominio</value>
  </data>
  <data name="ErrorOrgNumberCheckSum" xml:space="preserve">
    <value>ID aziendale/personale non valido</value>
  </data>
  <data name="ErrorProcessing" xml:space="preserve">
    <value>Errore durante l'elaborazione</value>
  </data>
  <data name="ErrorSearchArguments" xml:space="preserve">
    <value>Aggiungi fino a 4 nomi di dominio separandoli con uno spazio</value>
  </data>
  <data name="ErrorStringLength" xml:space="preserve">
    <value>È stato superato il numero massimo di caratteri consentito</value>
  </data>
  <data name="ErrorTermNotChecked" xml:space="preserve">
    <value>È necessario leggere e accettare i Termini e condizioni</value>
  </data>
  <data name="ErrorDeclarationNotChecked" xml:space="preserve">
    <value>È necessario leggere e accettare la Dichiarazione</value>
  </data>
  <data name="ErrorDeclarationFill" xml:space="preserve">
    <value>Per visualizzare il Modulo di autodichiarazione, è necessario compilare i campi:</value>
  </data>
  <data name="ErrorMustBeCompany" xml:space="preserve">
    <value>È necessario essere un'azienda o un'organizzazione</value>
  </data>
  <data name="ErrorMustBeFromNorway" xml:space="preserve">
    <value>È necessario indicare un indirizzo in Norvegia per registrare un dominio .no.</value>
  </data>
  <data name="ErrorMustBeFromGermany" xml:space="preserve">
    <value>È necessario indicare un indirizzo in Germania per registrare un dominio .de.</value>
  </data>
  <data name="ErrorMustBeFromNetherlands" xml:space="preserve">
    <value>È necessario indicare un indirizzo nei Paesi Bassi per registrare un dominio .nl.</value>
  </data>
  <data name="ErrorMustBeFromEU" xml:space="preserve">
    <value>È necessario indicare un indirizzo in Europa per registrare un dominio .eu.</value>
  </data>
</root>