//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The PublicOrderConfigurationSection Configuration Section.
    /// </summary>
    public partial class PublicOrderConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the PublicOrderConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PublicOrderConfigurationSectionSectionName = "publicOrderConfigurationSection";
        
        /// <summary>
        /// Gets the PublicOrderConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection Instance
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PublicOrderConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region DefaultCountry Property
        /// <summary>
        /// The XML name of the <see cref="DefaultCountry"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultCountryPropertyName = "defaultCountry";
        
        /// <summary>
        /// Gets or sets the DefaultCountry.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultCountry.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DefaultCountryPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry DefaultCountry
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DefaultCountryPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DefaultCountryPropertyName] = value;
            }
        }
        #endregion
        
        #region OnlinePayment Property
        /// <summary>
        /// The XML name of the <see cref="OnlinePayment"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string OnlinePaymentPropertyName = "onlinePayment";
        
        /// <summary>
        /// Gets or sets the OnlinePayment.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The OnlinePayment.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.OnlinePaymentPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment OnlinePayment
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.OnlinePaymentPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.OnlinePaymentPropertyName] = value;
            }
        }
        #endregion
        
        #region InvoiceByEmail Property
        /// <summary>
        /// The XML name of the <see cref="InvoiceByEmail"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string InvoiceByEmailPropertyName = "invoiceByEmail";
        
        /// <summary>
        /// Gets or sets the InvoiceByEmail.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The InvoiceByEmail.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByEmailPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail InvoiceByEmail
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByEmailPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByEmailPropertyName] = value;
            }
        }
        #endregion
        
        #region InvoiceByPost Property
        /// <summary>
        /// The XML name of the <see cref="InvoiceByPost"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string InvoiceByPostPropertyName = "invoiceByPost";
        
        /// <summary>
        /// Gets or sets the InvoiceByPost.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The InvoiceByPost.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByPostPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost InvoiceByPost
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByPostPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.InvoiceByPostPropertyName] = value;
            }
        }
        #endregion
        
        #region QueryStringList Property
        /// <summary>
        /// The XML name of the <see cref="QueryStringList"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string QueryStringListPropertyName = "queryStringList";
        
        /// <summary>
        /// Gets or sets the QueryStringList.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The QueryStringList.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.QueryStringListPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryStringList QueryStringList
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryStringList)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.QueryStringListPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.QueryStringListPropertyName] = value;
            }
        }
        #endregion
        
        #region CountriesList Property
        /// <summary>
        /// The XML name of the <see cref="CountriesList"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CountriesListPropertyName = "countriesList";
        
        /// <summary>
        /// Gets or sets the CountriesList.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The CountriesList.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.CountriesListPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.CountriesList CountriesList
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountriesList)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.CountriesListPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.CountriesListPropertyName] = value;
            }
        }
        #endregion
        
        #region PayPal Property
        /// <summary>
        /// The XML name of the <see cref="PayPal"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PayPalPropertyName = "payPal";
        
        /// <summary>
        /// Gets or sets the PayPal.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PayPal.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayPalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal PayPal
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayPalPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayPalPropertyName] = value;
            }
        }
        #endregion
        
        #region PayexRedirect Property
        /// <summary>
        /// The XML name of the <see cref="PayexRedirect"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PayexRedirectPropertyName = "payexRedirect";
        
        /// <summary>
        /// Gets or sets the PayexRedirect.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PayexRedirect.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayexRedirectPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect PayexRedirect
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayexRedirectPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.PayexRedirectPropertyName] = value;
            }
        }
        #endregion
        
        #region WorldPay Property
        /// <summary>
        /// The XML name of the <see cref="WorldPay"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string WorldPayPropertyName = "worldPay";
        
        /// <summary>
        /// Gets or sets the WorldPay.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The WorldPay.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay WorldPay
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayPropertyName] = value;
            }
        }
        #endregion
        
        #region DibsFlexwin Property
        /// <summary>
        /// The XML name of the <see cref="DibsFlexwin"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DibsFlexwinPropertyName = "dibsFlexwin";
        
        /// <summary>
        /// Gets or sets the DibsFlexwin.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The DibsFlexwin.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DibsFlexwinPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin DibsFlexwin
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DibsFlexwinPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.DibsFlexwinPropertyName] = value;
            }
        }
        #endregion
        
        #region ProductGroups Property
        /// <summary>
        /// The XML name of the <see cref="ProductGroups"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProductGroupsPropertyName = "productGroups";
        
        /// <summary>
        /// Gets or sets the ProductGroups.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ProductGroups.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.ProductGroupsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroups ProductGroups
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroups)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.ProductGroupsPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.ProductGroupsPropertyName] = value;
            }
        }
        #endregion
        
        #region WorldPayXml Property
        /// <summary>
        /// The XML name of the <see cref="WorldPayXml"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string WorldPayXmlPropertyName = "worldPayXml";
        
        /// <summary>
        /// Gets or sets the WorldPayXml.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The WorldPayXml.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayXmlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml WorldPayXml
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayXmlPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.WorldPayXmlPropertyName] = value;
            }
        }
        #endregion
        
        #region AdyenHpp Property
        /// <summary>
        /// The XML name of the <see cref="AdyenHpp"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AdyenHppPropertyName = "adyenHpp";
        
        /// <summary>
        /// Gets or sets the AdyenHpp.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AdyenHpp.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.AdyenHppPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp AdyenHpp
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.AdyenHppPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PublicOrderConfigurationSection.AdyenHppPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// A collection of QueryString instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryStringList.QueryStringPropertyName)]
    public partial class QueryStringList : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string QueryStringPropertyName = "queryString";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryStringList.QueryStringPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryStringList.QueryStringPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString this[int index]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString this[object name]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="queryString">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString queryString)
        {
            base.BaseAdd(queryString);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="queryString">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString queryString)
        {
            base.BaseRemove(this.GetElementKey(queryString));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The QueryString Configuration Element.
    /// </summary>
    public partial class QueryString : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.NamePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region PassToView Property
        /// <summary>
        /// The XML name of the <see cref="PassToView"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PassToViewPropertyName = "passToView";
        
        /// <summary>
        /// Gets or sets the PassToView.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PassToView.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.PassToViewPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool PassToView
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.PassToViewPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.QueryString.PassToViewPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The DefaultCountry Configuration Element.
    /// </summary>
    public partial class DefaultCountry : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.NamePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Code Property
        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.CodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.CodePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DefaultCountry.CodePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The OnlinePayment Configuration Element.
    /// </summary>
    public partial class OnlinePayment : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.OnlinePayment.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The InvoiceByEmail Configuration Element.
    /// </summary>
    public partial class InvoiceByEmail : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByEmail.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The InvoiceByPost Configuration Element.
    /// </summary>
    public partial class InvoiceByPost : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.InvoiceByPost.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// A collection of CountryItem instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Atomia.Web.Plugin.PublicOrder.Configurations.CountriesList.CountryItemPropertyName)]
    public partial class CountriesList : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CountryItemPropertyName = "countryItem";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Atomia.Web.Plugin.PublicOrder.Configurations.CountriesList.CountryItemPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Atomia.Web.Plugin.PublicOrder.Configurations.CountriesList.CountryItemPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem)(element)).Code;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem this[int index]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> with the specified key.
        /// </summary>
        /// <param name="code">The key of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem this[object code]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem)(base.BaseGet(code)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="countryItem">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem countryItem)
        {
            base.BaseAdd(countryItem);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="countryItem">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem countryItem)
        {
            base.BaseRemove(this.GetElementKey(countryItem));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem GetItemAt(int index)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> with the specified key.
        /// </summary>
        /// <param name="code">The key of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem GetItemByKey(string code)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem)(base.BaseGet(((object)(code)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The CountryItem Configuration Element.
    /// </summary>
    public partial class CountryItem : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.NamePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Code Property
        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CodePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CodePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CodePropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.DefaultPropertyName] = value;
            }
        }
        #endregion
        
        #region Image Property
        /// <summary>
        /// The XML name of the <see cref="Image"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ImagePropertyName = "image";
        
        /// <summary>
        /// Gets or sets the Image.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Image.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.ImagePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Image
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.ImagePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.ImagePropertyName] = value;
            }
        }
        #endregion
        
        #region Currency Property
        /// <summary>
        /// The XML name of the <see cref="Currency"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CurrencyPropertyName = "currency";
        
        /// <summary>
        /// Gets or sets the Currency.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Currency.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CurrencyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Currency
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CurrencyPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.CountryItem.CurrencyPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The PayPal Configuration Element.
    /// </summary>
    public partial class PayPal : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal.EnabledPropertyName]));
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayPal.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The PayexRedirect Configuration Element.
    /// </summary>
    public partial class PayexRedirect : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect.EnabledPropertyName]));
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.PayexRedirect.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The WorldPay Configuration Element.
    /// </summary>
    public partial class WorldPay : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPay.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The DibsFlexwin Configuration Element.
    /// </summary>
    public partial class DibsFlexwin : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin.EnabledPropertyName]));
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.DibsFlexwin.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// A collection of ProductGroup instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroups.ProductGroupPropertyName)]
    public partial class ProductGroups : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProductGroupPropertyName = "productGroup";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroups.ProductGroupPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroups.ProductGroupPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup)(element)).GroupName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup this[int index]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> with the specified key.
        /// </summary>
        /// <param name="groupName">The key of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup this[object groupName]
        {
            get
            {
                return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup)(base.BaseGet(groupName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="productGroup">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup productGroup)
        {
            base.BaseAdd(productGroup);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="productGroup">The <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup productGroup)
        {
            base.BaseRemove(this.GetElementKey(productGroup));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup GetItemAt(int index)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> with the specified key.
        /// </summary>
        /// <param name="groupName">The key of the <see cref="global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup GetItemByKey(string groupName)
        {
            return ((global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup)(base.BaseGet(((object)(groupName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The ProductGroup Configuration Element.
    /// </summary>
    public partial class ProductGroup : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region GroupName Property
        /// <summary>
        /// The XML name of the <see cref="GroupName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string GroupNamePropertyName = "groupName";
        
        /// <summary>
        /// Gets or sets the GroupName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The GroupName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.GroupNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string GroupName
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.GroupNamePropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.GroupNamePropertyName] = value;
            }
        }
        #endregion
        
        #region OrderPageOptions Property
        /// <summary>
        /// The XML name of the <see cref="OrderPageOptions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string OrderPageOptionsPropertyName = "orderPageOptions";
        
        /// <summary>
        /// Gets or sets the OrderPageOptions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The OrderPageOptions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.OrderPageOptionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string OrderPageOptions
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.OrderPageOptionsPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.ProductGroup.OrderPageOptionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The WorldPayXml Configuration Element.
    /// </summary>
    public partial class WorldPayXml : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.WorldPayXml.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Atomia.Web.Plugin.PublicOrder.Configurations
{
    
    
    /// <summary>
    /// The AdyenHpp Configuration Element.
    /// </summary>
    public partial class AdyenHpp : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.EnabledPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Enabled
        {
            get
            {
                return ((string)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.EnabledPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Default
        {
            get
            {
                return ((bool)(base[global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.DefaultPropertyName]));
            }
            set
            {
                base[global::Atomia.Web.Plugin.PublicOrder.Configurations.AdyenHpp.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
